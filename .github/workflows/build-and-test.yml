
on:
  push:
    branches: [ main, stable, oldstable ]
  pull_request:
    branches: [ main, stable, oldstable ]
name: 'Build and Test'
jobs:
  check-format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Check Source Format
        run: |
          clang-format -i -style=file src/gmp.h src/gmp_base.h src/gmp_delete.h \
          src/gmp_get.h src/gmp_tickets.h src/gmpd.h src/iterator.h \
          src/manage_utils.h src/sql.h src/types.h src/utils.h
          git diff --exit-code

  build-doc:
    name: Build standard documentation
    runs-on: ubuntu-latest
    container: greenbone/doxygen
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Build standard documentation, failing if there are warnings
        run: |
          mkdir build
          cd build
          cmake -DSKIP_SRC=1 ..
          make doc 2>&1 1>/dev/null | { ! grep --invert-match "CGI::Pretty"; }

  generate-doc-and-upload-coverage:
    name: Build XML documentation
    runs-on: ubuntu-latest
    container: greenbone/doxygen
    steps:
      - name: Check out openvas-scanner
        uses: actions/checkout@v2
      - name: Install coverxygen and codecov
        run: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install setuptools --upgrade
            pip install 'coverxygen>=1.3.1' codecov
      - name: Generate documentation (XML)
        run: |
          mkdir build
          cd build
          cmake -DSKIP_SRC=1 ..
          make doc-xml
      - name: Establish documentation coverage
        run: |
            . .venv/bin/activate
            python -m coverxygen --src-dir ${{ github.workspace }} \
            --xml-dir build/doc/generated/xml/ --output lcov.info
      - uses: codecov/codecov-action@v1
        with:
          files: lcov.info

  build-gmp-doc:
    name: Build GMP documentation
    runs-on: ubuntu-latest
    container: greenbone/gvmd-clang-build:unstable
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Generate GMP documentation (HTML)
        run: |
          mkdir build
          cd build
          cmake -DSKIP_SRC=1 ..
          make doc-gmp
      # We do not use this upload ...
      # - name: Upload GMP documentation artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: gmp.html
      #     path: build/doc/gmp.html

  build:
    name: Build various configs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type:
          - Debug
          - Release
        docker_base:
          - greenbone/gvmd-clang-build:unstable
          - greenbone/gvmd-gcc-build:unstable
    container: ${{ matrix.docker_base }}
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Configure and compile gvmd
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
          make install

  scan-build:
    name: Scan-build (clang static analyzer)
    runs-on: ubuntu-latest
    container: greenbone/gvmd-clang-build:unstable
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Configure and Scan Build (Debug, PostgreSQL)
        run: |
          mkdir build
          cd build
          scan-build cmake -DCMAKE_BUILD_TYPE=Debug ..
          scan-build -o ~/scan-build-report make
          [ -z "$(ls -A ~/scan-build-report/)" ]
      # We do not use this upload ...
      # - name: Upload scan-build report
      #   if: failure()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: scan-build-report
      #     path: ~/scan-build-report/

  test-units:
    name: Build and run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_base:
          - greenbone/gvmd-clang-build:unstable
          - greenbone/gvmd-gcc-build:unstable
    container: ${{ matrix.docker_base }}
    steps:
      - name: Check out gvmd
        uses: actions/checkout@v2
      - name: Configure and run unit tests
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_COVERAGE=1 ..
          make
          make tests
          CTEST_OUTPUT_ON_FAILURE=1 make test
